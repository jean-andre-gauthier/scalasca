package <empty> {
	class UCRFieldIfTest extends scala.AnyRef {
		def <init>(): UCRFieldIfTest = {
			UCRFieldIfTest.super.<init>();
			()
		};
		def m(): Unit = {
			val ab: Boolean = true;
			val bb: Boolean = false;
			class A extends scala.AnyRef {
				def <init>(): A = {
					A.super.<init>();
					()
				};
				private[this] val a: Int = 11;
				<stable> <accessor> def a: Int = A.this.a
			};
			object B extends scala.AnyRef {
				def <init>(): B.type = {
					B.super.<init>();
					()
				};
				private[this] val b: Int = 12;
				<stable> <accessor> def b: Int = B.this.b
			};
			@volatile var B$module: B.type = _;
			<stable> def B: B.type = {
				B$module = new B.type();
				B$module
			};
			abstract trait C extends scala.AnyRef {
				def /*C*/$init$(): Unit = {
					()
				};
				private[this] val c: Int = 12;
				<stable> <accessor> def c: Int = C.this.c
			};
			{
				new A();
				()
			}
		}
	}
}